# -*- coding: utf-8 -*-
"""4. Funkcje.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GbnXj-MptYWe6AAsFMsV9yqG7ns2VrQs

# Funkcje

## Definiowanie Fukncji

- Widzieliśmy już pętle for jako sposób na przestrzeganie zasady DRY (Don't Repeat Yourself).
- Następnym ważnym krokiem są funkcje.
- Funkcje umożliwiają zaprogramowanie bloku kodu, który działa tylko po wywołaniu.
- Oznacza to, że możemy uniknąć konieczności ponownego definiowania tych samych operacji, gdy wykonujemy je wielokrotnie.
<br><br>
- Funkcja przyjmuje parametry i zwraca dane wyjściowe.
- Wartość przekazana jako parametr nazywana jest argumentem.
- Funkcja powiązana z obiektem nazywana jest metodą.
- Instancja funkcji nazywana jest wywołaniem funkcji.
- Podstawowa składnia funkcji jest następująca:
"""

# function definition
def function_name(param1, param2 = 1):
    '''
    DOCSTRING: explains function
    INPUT: Name (str)
    OUTPUT: Hello Name (str)
    '''
    # add code to run
    return("Hello " + param1)

# function call
function_name("Zain")

function_name

def funkcja_nie_zwracajaca(arg1):
  print(arg1)

funkcja_nie_zwracajaca("Oliwia")

"""- Słowo kluczowe __def__ pokazuje pythona, którego zamierzasz zdefiniować.
- __Nazwa funkcji__ jest następna, nazwij wszystkie małe litery, oddzielone podkreśleniami, nie używaj wbudowanych słów kluczowych: zobacz PEP8 po szczegóły.
- __Parametry__ zdefiniowane w nawiasach.
- __Argumenty domyślne__ to argumenty, które mają wartość domyślną do przywrócenia, jeśli nie określono innej wartości. W tym przypadku param2 = 1 oznacza, że ​​param2 będzie wynosić 1, chyba że zostanie określone jako coś innego w wywołaniu funkcji.
- __Dwukropek__ oznacza koniec linii definicji, następny wiersz będzie wcięty.
- __Docstrings__ wyjaśnij, co robi funkcja: przeczytaj PEP257 lub google __*'python docstrings'*__, aby uzyskać wskazówki.
- https://www.python.org/dev/peps/pep-0257/
- Słowo kluczowe __return__ wskazuje wyjście funkcji.
<br><br>
- Wykonując wywołanie funkcji, piszemy nazwę funkcji, a po niej nawiasy zawierające argumenty do przekazania.
- __POWOLNY BŁĄD: jeśli wywołasz funkcję bez nawiasów, nie będzie działać!!!__
- Po prostu pokaże informacje o funkcji, w tym moduł, do którego należy, jej nazwę i parametry, które przyjmuje.

## help()

- Możemy użyć funkcji help(), aby znaleźć dokumentację, jeśli nie wiemy, co robi funkcja.
- Lub naciśnij Shift + Tab.
- Aby uzyskać bardziej szczegółową dokumentację, lepiej znaleźć i wykorzystać pełną dokumentację funkcji (google it!).
"""

help(function_name)

help(print)

"""## Zakres zmiennej

- Zakres zmiennej odnosi się do części programu, które mogą odwoływać się do zmiennej.
- Istnieją 2 rodzaje zasięgu: lokalny i globalny.
— Do zmiennej zdefiniowanej wewnątrz funkcji można się odwoływać tylko wewnątrz tej funkcji: zakres lokalny.
— Do zmiennej zdefiniowanej poza funkcją (w ogólnym skrypcie) można się odwoływać wewnątrz funkcji, ale nie można jej modyfikować wewnątrz funkcji (UnboundLocalError).
- Aby zmienić go w funkcji, należy go ponownie zdefiniować w funkcji.
"""

counter = 0

def add_to_counter():
    counter += 12 # add 12 to counter

add_to_counter()

counter = 0

def add_to_counter(count):
    return count + 12  # add 12 to counter

counter = add_to_counter(counter)

print(counter)

"""## Ćwiczenie 1

Napisz funkcję o nazwie check_range, która sprawdza, czy liczba znajduje się w podanym zakresie (zawiera zarówno niski *__i__* wysoki). <br>
Jeśli tak, zwróć „x jest między y a z”. <br>
Jeśli tak nie jest, zwróć „x NIE jest między y a z”. <br>
Gdzie:
- x to liczba
- y jest dolną granicą
- z to górna granica
"""

# CODE HERE
def check_range(x, y, z):
  if x >= y and x <= z:
    print(f"{x} jest między {y} a {z}")
  else:
    print(f"{x} nie jest między {y} a {z}")

check_range(34, 9, 228)

check_range(7, 2, 5)

"""Napisz funkcję o nazwie bool_range, która robi to samo, ale zwraca tylko wartość logiczną."""

def bool_range(x, y, z):
  if x >= y and x <= z:
    return True
  else:
    return False

bool_range(7, 5, 20)

bool_range(67, 22, 25)

"""## Ćwiczenie 2

Napisz funkcję o nazwie unique_list, która pobiera listę i zwraca listę zawierającą tylko unikalne elementy danych wejściowych.
"""

# CODE HERE
def unique_list(list):
  set_of_list1 =[]
  for item in list:
    if item not in set_of_list1:
      set_of_list1.append(item)
    else:
      continue
  return(set_of_list1)

my_list = [1,3,5,6,4,3,2,3,3,4,3,4,5,6,6,4,3,2,12,3,5,63,4,5,3,3,2]

unique_list(my_list)

"""Znajdź inny sposób wykonania tej samej operacji bez definiowania funkcji."""

# CODE HERE

set_of_list2 = set(my_list)
set_of_list2

"""## Ćwiczenie 3

Napisz funkcję o nazwie objętość_kuli, która przyjmuje promień kuli i zwraca jej objętość zaokrągloną do 2 dp. (Google wzór na objętość kuli, użyj pi = 3,14)
"""

# CODE HERE
pi = 3.14
def volume_of_sphere(radius):
  volume_of_sphere = 4/3*pi*radius**3

  return round(volume_of_sphere,2)

volume_of_sphere(2)



"""## Rekurencja

- Funkcja rekurencyjna to funkcja, która wywołuje siebie w ramach swojej definicji.
- Na początku może to być trudne do zrozumienia, ale pomyśl o tym jako o przełamaniu dużego problemu w wielokrotne robienie małego problemu.
- Oznacza to, że złożony problem można uprościć, powtarzając przy każdym powtórzeniu prostszą i prostszą formę tego samego problemu.
- Musimy jednak podać „najprostszą formę” funkcji, w której funkcja się zatrzymuje, w przeciwnym razie będzie się powtarzać w nieskończoność i wygeneruje błąd.
- Nazywamy tę „najprostszą formę” przypadkiem podstawowym.
- Najlepiej ilustruje to przykład:
"""

# Funkcja, która przyjmuje jako wejście liczbę początkową do odliczania
def countdown(n):

    # przypadek podstawowy: w tym miejscu funkcja ostatecznie się zatrzyma
    if n == 0:
        print(0)

    # tutaj redukujemy problem do prostszej wersji
    else:

        #wypisujemy numer odliczania
        print(n)

        # powtarzamy funkcję z następną najmniejszą liczbą
        countdown(n-1)


countdown(5)



"""## Ćwiczenie 4

Zdefiniuj funkcję rekurencyjną o nazwie num_fact, która zwraca silnię podanej liczby.
"""

# CODE HERE
def num_fact(n):
  if n == 0:
    return 1
  else:
    return n * num_fact(n-1)

num_fact(10)



"""## Dalsza lektura
- Python Function Definitions: https://docs.python.org/3/reference/compound_stmts.html#function-definitions
- Python Docstring Conventions: https://www.python.org/dev/peps/pep-0257/
"""

